use crc_any::*;

const S_BOX: [[u8; 16]; 16] = [
    [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76,
    ],
    [
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
        0xc0,
    ],
    [
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,
        0x15,
    ],
    [
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2,
        0x75,
    ],
    [
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f,
        0x84,
    ],
    [
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
        0xcf,
    ],
    [
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f,
        0xa8,
    ],
    [
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,
        0xd2,
    ],
    [
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73,
    ],
    [
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b,
        0xdb,
    ],
    [
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
        0x79,
    ],
    [
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae,
        0x08,
    ],
    [
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,
        0x8a,
    ],
    [
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d,
        0x9e,
    ],
    [
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28,
        0xdf,
    ],
    [
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ],
];

const S_BOX_INV: [[u8; 16]; 16] = [
    [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7,
        0xfb,
    ],
    [
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9,
        0xcb,
    ],
    [
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3,
        0x4e,
    ],
    [
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1,
        0x25,
    ],
    [
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6,
        0x92,
    ],
    [
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d,
        0x84,
    ],
    [
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45,
        0x06,
    ],
    [
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a,
        0x6b,
    ],
    [
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73,
    ],
    [
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf,
        0x6e,
    ],
    [
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe,
        0x1b,
    ],
    [
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a,
        0xf4,
    ],
    [
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec,
        0x5f,
    ],
    [
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c,
        0xef,
    ],
    [
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99,
        0x61,
    ],
    [
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c,
        0x7d,
    ],
];

pub trait Printer {
    fn try_print(&self);
}

pub trait ProcessBytes {
    fn process_bytes(&mut self, arr: &[u8]);
}

impl Printer for CRC {
    fn try_print(&self) {
        println!("Inside CRCu8");
    }
}

impl ProcessBytes for CRC {
    fn process_bytes(&mut self, arr: &[u8]) {
        for byte in arr.iter() {
            self.digest(&[*byte]);
        }
        //self.digest(arr);
    }
}

impl ProcessBytes for CRCu16 {
    fn process_bytes(&mut self, arr: &[u8]) {
        for byte in arr.iter() {
            println!("Processing byte 0x{:x}", *byte);
            self.digest(&[*byte]);
        }
        //self.digest(arr);
    }
}

impl Printer for CRCu16 {
    fn try_print(&self) {
        println!("Inside CRCu16");
    }
}

impl Printer for CRCu32 {
    fn try_print(&self) {
        println!("Inside CRCu32");
    }
}

impl Printer for CRCu64 {
    fn try_print(&self) {
        println!("Inside CRCu64");
    }
}

#[allow(dead_code)]
fn proc(arr: &[u8]) {
    for b in arr.iter() {
        println!("{:x}", *b);
    }
}

#[allow(dead_code)]
fn do_crc_16() {
    // instantiate crc16 instance (KERMIT) algorithm
    let mut crc16 = CRCu16::crc16kermit();

    // Define data to process
    let arr: [u8; 8] = [0xde, 0xad, 0xbe, 0xef, 0x4d, 0xad, 0x4d, 0xad];

    // Calculate digest on binary data
    crc16.digest(b"123456789");

    // Try printing out using trait defined for crc16
    crc16.try_print();
    println!("{:#}", &crc16.to_string());

    crc16.reset();

    // Try processing on byte array instead
    crc16.process_bytes(&arr);

    println!("process_bytes: {:#}", &crc16.to_string());

    crc16.reset();

    // Try processing on a vector instead
    let arr2 = vec![0xde, 0xad, 0xbe, 0xef, 0x4d, 0xad, 0x4d, 0xad];

    crc16.digest(&arr2);

    println!("use_vec =: {:#}", &crc16.to_string());

    crc16.reset();

    // Try processing on individual [u8] data instead
    let var1 = [0xde];
    let var2 = [0xad];
    let var3 = [0xbe];
    let var4 = [0xef];
    let var5 = [0x4d];
    let var6 = [0xad];
    let var7 = [0x4d];
    let var8 = [0xad];
    crc16.digest(&var1);
    crc16.digest(&var2);
    crc16.digest(&var3);
    crc16.digest(&var4);
    crc16.digest(&var5);
    crc16.digest(&var6);
    crc16.digest(&var7);
    crc16.digest(&var8);

    proc(&crc16.get_crc_vec_le());
    proc(&crc16.get_crc_vec_be());
}

#[allow(dead_code)]
fn do_crc_32() {
    let mut crc32 = CRCu32::crc32();

    crc32.digest(b"123456789");

    println!("crc32 {:?}", crc32.to_string());
}

#[allow(dead_code)]
fn shift_rows(state: &mut [[u8; 4]; 4]) {
    let int_state: [[u8; 4]; 4] = state.clone();
    // given a state array S perform the following:
    //  - row 0 shifts 0 times

    //  - row 1 circularly shifts left 1 time
    state[1][0] = int_state[1][1];
    state[1][1] = int_state[1][2];
    state[1][2] = int_state[1][3];
    state[1][3] = int_state[1][0];

    //  - row 2 circularly shifts left 2 times
    state[2][0] = int_state[2][2];
    state[2][1] = int_state[2][3];
    state[2][2] = int_state[2][0];
    state[2][3] = int_state[2][1];

    //  - row 3 circularly shifts left 3 times
    state[3][0] = int_state[3][3];
    state[3][1] = int_state[3][0];
    state[3][2] = int_state[3][1];
    state[3][3] = int_state[3][2];
}

#[allow(dead_code)]
fn inv_shift_rows(state: &mut [[u8; 4]; 4]) {
    let int_state: [[u8; 4]; 4] = state.clone();
    // given a state array S perform the following:
    //  - row 0 shifts 0 times

    //  - row 1 circularly shifts right 1 time
    state[1][0] = int_state[1][3];
    state[1][1] = int_state[1][0];
    state[1][2] = int_state[1][1];
    state[1][3] = int_state[1][2];

    //  - row 2 circularly shifts right 2 times
    state[2][0] = int_state[2][2];
    state[2][1] = int_state[2][3];
    state[2][2] = int_state[2][0];
    state[2][3] = int_state[2][1];

    //  - row 3 circularly shifts right 3 times
    state[3][0] = int_state[3][1];
    state[3][1] = int_state[3][2];
    state[3][2] = int_state[3][3];
    state[3][3] = int_state[3][0];
}

#[allow(dead_code)]
fn byte_sub(state: &mut [[u8; 4]; 4]) {
    for _row in 0..4 {
        for _col in 0..4 {
            let ms_nibble: usize = ((state[_row][_col] & 0xF0) >> 4).into();
            let ls_nibble: usize = (state[_row][_col] & 0x0F).into();

            state[_row][_col] = S_BOX[ms_nibble][ls_nibble];
        }
    }
}

#[allow(dead_code)]
fn inv_byte_sub(state: &mut [[u8; 4]; 4]) {
    for _row in 0..4 {
        for _col in 0..4 {
            let ms_nibble: usize = ((state[_row][_col] & 0xF0) >> 4).into();
            let ls_nibble: usize = (state[_row][_col] & 0x0F).into();

            state[_row][_col] = S_BOX_INV[ms_nibble][ls_nibble];
        }
    }
}

fn main() {
    //do_crc_16();
    //do_crc_32();
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn t_shift_rows() {
        let mut data: [[u8; 4]; 4] = [
            [0x00, 0x44, 0x88, 0xcc],
            [0x11, 0x55, 0x99, 0xdd],
            [0x22, 0x66, 0xaa, 0xee],
            [0x33, 0x77, 0xbb, 0xff],
        ];

        let kat: [[u8; 4]; 4] = [
            [0x00, 0x44, 0x88, 0xcc],
            [0x55, 0x99, 0xdd, 0x11],
            [0xaa, 0xee, 0x22, 0x66],
            [0xff, 0x33, 0x77, 0xbb],
        ];

        shift_rows(&mut data);

        assert_eq!(kat, data);
    }

    #[test]
    fn t_inv_shift_rows() {
        let kat: [[u8; 4]; 4] = [
            [0x00, 0x44, 0x88, 0xcc],
            [0x11, 0x55, 0x99, 0xdd],
            [0x22, 0x66, 0xaa, 0xee],
            [0x33, 0x77, 0xbb, 0xff],
        ];

        let mut data: [[u8; 4]; 4] = [
            [0x00, 0x44, 0x88, 0xcc],
            [0x55, 0x99, 0xdd, 0x11],
            [0xaa, 0xee, 0x22, 0x66],
            [0xff, 0x33, 0x77, 0xbb],
        ];

        inv_shift_rows(&mut data);

        assert_eq!(kat, data);
    }

    #[test]
    fn t_byte_sub() {
        let mut data: [[u8; 4]; 4] = [
            [0x19, 0xa0, 0x9a, 0xe9],
            [0x3d, 0xf4, 0xc6, 0xf8],
            [0xe3, 0xe2, 0x8d, 0x48],
            [0xbe, 0x2b, 0x2a, 0x08],
        ];

        let kat: [[u8; 4]; 4] = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0x27, 0xbf, 0xb4, 0x41],
            [0x11, 0x98, 0x5d, 0x52],
            [0xae, 0xf1, 0xe5, 0x30],
        ];

        byte_sub(&mut data);

        assert_eq!(kat, data);
    }

    #[test]
    fn t_inv_byte_sub() {
        let kat: [[u8; 4]; 4] = [
            [0x19, 0xa0, 0x9a, 0xe9],
            [0x3d, 0xf4, 0xc6, 0xf8],
            [0xe3, 0xe2, 0x8d, 0x48],
            [0xbe, 0x2b, 0x2a, 0x08],
        ];

        let mut data: [[u8; 4]; 4] = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0x27, 0xbf, 0xb4, 0x41],
            [0x11, 0x98, 0x5d, 0x52],
            [0xae, 0xf1, 0xe5, 0x30],
        ];

        inv_byte_sub(&mut data);

        assert_eq!(kat, data);
    }
}
